"""Git configuration management utilities with user-friendly interface."""

from pathlib import Path
import subprocess
from typing import List, Dict, Optional
from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
                            QLabel, QTextEdit, QGroupBox, QCheckBox, QMessageBox,
                            QComboBox, QFormLayout, QScrollArea, QDialog, QDialogButtonBox,
                            QSizePolicy)
from PyQt6.QtCore import Qt, pyqtSignal

from PyQt6.QtGui import QFont
from .project_constants import GIT_EXPORT_PATTERNS

class GitConfigManager(QWidget):
    """User-friendly interface for managing Git configurations."""
    
    config_changed = pyqtSignal()  # Signal emitted when configuration changes

    def __init__(self, repo_path: str, parent=None):
        """Initialize the Git config manager."""
        super().__init__(parent)
        self.repo_path = repo_path
        self.pattern_checkboxes = {}
        self.init_ui()
        self.apply_styles()

    def init_ui(self):
        """Initialize the Git config manager UI"""
        layout = QVBoxLayout()
        self.setLayout(layout)

        # Description label
        desc_label = QLabel("Configure Git export-ignore patterns for your project. These patterns determine which files are excluded from release archives.")
        desc_label.setWordWrap(True)
        layout.addWidget(desc_label)

        # Create scroll area for patterns
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        layout.addWidget(scroll)

        # Container for pattern groups
        pattern_container = QWidget()
        pattern_layout = QVBoxLayout(pattern_container)

        # Group patterns by category
        current_category = None
        group_box = None
        group_layout = None

        for pattern_tuple in GIT_EXPORT_PATTERNS:
            pattern, description = pattern_tuple[:2]
            default_checked = True if len(pattern_tuple) <= 2 else pattern_tuple[2]

            # Check for category in description (denoted by #)
            if pattern.startswith('#'):
                current_category = pattern.lstrip('# ')
                group_box = QGroupBox(current_category)
                group_layout = QVBoxLayout()
                group_box.setLayout(group_layout)
                pattern_layout.addWidget(group_box)
                continue

            if group_layout is None:
                # Create default group if none exists
                group_box = QGroupBox("General")
                group_layout = QVBoxLayout()
                group_box.setLayout(group_layout)
                pattern_layout.addWidget(group_box)

            # Create pattern widget
            pattern_widget = QWidget()
            pattern_widget_layout = QVBoxLayout()
            pattern_widget.setLayout(pattern_widget_layout)

            # Add checkbox with pattern
            checkbox = QCheckBox(pattern)
            checkbox.setChecked(default_checked)
            self.pattern_checkboxes[pattern] = checkbox
            pattern_widget_layout.addWidget(checkbox)

            # Add description label
            desc_label = QLabel(description)
            desc_label.setWordWrap(True)
            desc_label.setStyleSheet("color: palette(text); font-size: 9pt; margin-left: 20px;")
            pattern_widget_layout.addWidget(desc_label)

            group_layout.addWidget(pattern_widget)

        scroll.setWidget(pattern_container)

        # Buttons container
        buttons_container = QWidget()
        buttons_layout = QHBoxLayout()
        buttons_container.setLayout(buttons_layout)

        # Preview button
        preview_btn = QPushButton("Preview Selected")
        preview_btn.clicked.connect(self.preview_selected_patterns)
        buttons_layout.addWidget(preview_btn)

        # Save button
        save_btn = QPushButton("Save Selected")
        save_btn.clicked.connect(self.save_selected_patterns)
        buttons_layout.addWidget(save_btn)

        layout.addWidget(buttons_container)

    def preview_selected_patterns(self):
        """Show preview of selected patterns"""
        preview_text = "#Generated by Varchiver GitConfigManager\n* text=auto\n"
        
        # Get existing patterns
        gitattributes_path = Path(self.repo_path) / ".gitattributes"
        existing_patterns = set()
        if gitattributes_path.exists():
            existing_patterns = set(gitattributes_path.read_text().splitlines())

        # Add selected patterns by category
        current_category = None
        selected_patterns = []
        
        for pattern_tuple in GIT_EXPORT_PATTERNS:
            pattern, description = pattern_tuple[:2]
            
            # Handle category headers
            if description is None:
                if selected_patterns:  # Add newline between categories if we have patterns
                    selected_patterns.append("")
                selected_patterns.append(pattern)
                continue
                
            # Skip unselected patterns
            if not self.pattern_checkboxes[pattern].isChecked():
                continue
                
            # Add pattern with status
            if pattern in existing_patterns:
                selected_patterns.append(f"{pattern}  # already in .gitattributes")
            else:
                selected_patterns.append(pattern)

        if selected_patterns:
            preview_text += "\n" + "\n".join(selected_patterns)
        else:
            preview_text += "\n# No patterns selected"

        # Show preview dialog
        preview_dialog = QDialog(self)
        preview_dialog.setWindowTitle("Preview Selected Patterns")
        preview_dialog.setMinimumWidth(600)
        preview_dialog.setMinimumHeight(400)

        dialog_layout = QVBoxLayout()
        preview_dialog.setLayout(dialog_layout)

        preview_edit = QTextEdit()
        preview_edit.setReadOnly(True)
        preview_edit.setFont(QFont("Monospace"))
        preview_edit.setText(preview_text)
        dialog_layout.addWidget(preview_edit)

        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok)
        button_box.accepted.connect(preview_dialog.accept)
        dialog_layout.addWidget(button_box)

        preview_dialog.exec()

    def save_selected_patterns(self):
        """Save selected patterns to .gitattributes"""
        try:
            gitattributes_path = Path(self.repo_path) / ".gitattributes"
            
            # Get existing patterns
            existing_patterns = set()
            if gitattributes_path.exists():
                existing_patterns = set(line.strip() for line in gitattributes_path.read_text().splitlines()
                                     if line.strip() and not line.strip().startswith('#'))

            # Build new content with categories
            new_content = ["# Git export-ignore patterns"]
            current_category = None
            
            for pattern_tuple in GIT_EXPORT_PATTERNS:
                pattern, description = pattern_tuple[:2]
                
                # Handle category headers
                if description is None:
                    if new_content[-1] != "":  # Add newline before category if needed
                        new_content.append("")
                    new_content.append(pattern)
                    continue
                    
                # Add selected patterns
                if self.pattern_checkboxes[pattern].isChecked():
                    new_content.append(pattern)

            # Write to file
            gitattributes_path.write_text("\n".join(new_content) + "\n")

            QMessageBox.information(self, "Success", "Patterns saved to .gitattributes")

        except Exception as e:
            QMessageBox.warning(self, "Error", f"Failed to save patterns: {str(e)}")

    def apply_styles(self):
        """Apply dark mode compatible styles"""
        self.setStyleSheet("""
            QGroupBox {
                background-color: transparent;
                border: 1px solid palette(mid);
                border-radius: 4px;
                margin-top: 8px;
                padding-top: 8px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 8px;
                padding: 0 3px;
            }
            QCheckBox {
                color: palette(text);
            }
            QCheckBox:hover {
                color: palette(highlight);
            }
            QPushButton {
                background-color: palette(button);
                border: 1px solid palette(mid);
                border-radius: 4px;
                padding: 6px;
                min-width: 80px;
            }
            QPushButton:hover {
                background-color: palette(light);
            }
            QPushButton:pressed {
                background-color: palette(dark);
            }
            QScrollArea {
                border: 1px solid palette(mid);
                border-radius: 4px;
            }
        """)

def setup_git_config(repo_path: Path) -> None:
    """Helper function to set up initial Git configuration."""
    if not (repo_path / '.git').exists():
        raise ValueError(f"Not a Git repository: {repo_path}")
    
    # Ensure .gitattributes exists
    gitattributes_path = repo_path / '.gitattributes'
    if not gitattributes_path.exists():
        gitattributes_path.write_text("# Generated by Varchiver Git Config Manager\n") 